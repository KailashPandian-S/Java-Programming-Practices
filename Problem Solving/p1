/*   

Given a list of strings words and a string pattern, return a list of words[i] that match pattern. You may return the answer in any order.

A word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word.

Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.

*/







class Solution {

    static String getPattern(String pattern){
        HashMap<Character,Integer> m1 = new HashMap<>();
        int temp = 1;
         for(int i = 0 ; i< pattern.length();i++){
             char ch = pattern.charAt(i);
             if(!m1.containsKey(ch)){
                m1.put(ch,temp);
                temp++;
             }
            

             
       }
       String res = "";
       for(int i = 0 ; i < pattern.length() ; i++){
               char ch = pattern.charAt(i);
               res += m1.get(ch) + " ";
       }
        
        return res;
    }

    public List<String> findAndReplacePattern(String[] words, String pattern) {
        ArrayList<String> lst = new ArrayList<>();
        String common = getPattern(pattern);
        System.out.println(common);
        String temp;
        // System.out.println(common);
        for(String word : words){
           temp = getPattern(word);
           System.out.println(temp);
           if(temp.equals(common)){
            lst.add(word);
        
           }
        }
        return lst;

    }
}
