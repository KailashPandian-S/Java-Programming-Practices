/*

 Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer.

The algorithm for myAtoi(string s) is as follows:

Whitespace: Ignore any leading whitespace (" ").
Signedness: Determine the sign by checking if the next character is '-' or '+', assuming positivity if neither present.
Conversion: Read the integer by skipping leading zeros until a non-digit character is encountered or the end of the string is reached. If no digits were read, then the result is 0.
Rounding: If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then round the integer to remain in the range. Specifically, integers less than -231 should be rounded to -231, and integers greater than 231 - 1 should be rounded to 231 - 1.
Return the integer as the final result.

 
*/



class Solution {
    public int myAtoi(String s) {
       String res = "";
       int n = s.length();
       boolean sign = false;
       boolean num = false;
       for(int i = 0 ;i < n;i++){
           char ch = s.charAt(i);
           if(Character.isDigit(ch)){
              num = true;
              res += ch;
           }
           else if (ch == '.' && num){
                   res += ch;
           }
           else if(ch == ' ' && !sign && !num){
                continue;
               
           }
           else if((ch == '+' || ch == '-')&& !num && !sign){
                 res += ch;
                 sign = true;
           }
           else{
            break;
           }
       }
       int n1 = res.length();
       if(n1 == 0){
        return 0;
       }
       else if(!num){
        return 0;
       }
       else{
        double ans = Double.parseDouble(res);
        if(ans > 2147483647)
          return 2147483647;
        if(ans < -2147483648)
          return -2147483648;
        return (int)ans;
       }
    }
}
